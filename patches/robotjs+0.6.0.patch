diff --git a/node_modules/robotjs/src/keycode.h b/node_modules/robotjs/src/keycode.h
index 9d0b099..0b026c1 100644
--- a/node_modules/robotjs/src/keycode.h
+++ b/node_modules/robotjs/src/keycode.h
@@ -17,6 +17,55 @@ extern "C"
 	
 enum _MMKeyCode {
 	K_NOT_A_KEY = 9999,
+
+	K_DIGIT_0 = kVK_ANSI_0,
+	K_DIGIT_1 = kVK_ANSI_1,
+	K_DIGIT_2 = kVK_ANSI_2,
+	K_DIGIT_3 = kVK_ANSI_3,
+	K_DIGIT_4 = kVK_ANSI_4,
+	K_DIGIT_5 = kVK_ANSI_5,
+	K_DIGIT_6 = kVK_ANSI_6,
+	K_DIGIT_7 = kVK_ANSI_7,
+	K_DIGIT_8 = kVK_ANSI_8,
+	K_DIGIT_9 = kVK_ANSI_9,
+	K_KEY_A = kVK_ANSI_A,
+	K_KEY_B = kVK_ANSI_B,
+	K_KEY_C = kVK_ANSI_C,
+	K_KEY_D = kVK_ANSI_D,
+	K_KEY_E = kVK_ANSI_E,
+	K_KEY_F = kVK_ANSI_F,
+	K_KEY_G = kVK_ANSI_G,
+	K_KEY_H = kVK_ANSI_H,
+	K_KEY_I = kVK_ANSI_I,
+	K_KEY_J = kVK_ANSI_J,
+	K_KEY_K = kVK_ANSI_K,
+	K_KEY_L = kVK_ANSI_L,
+	K_KEY_M = kVK_ANSI_M,
+	K_KEY_N = kVK_ANSI_N,
+	K_KEY_O = kVK_ANSI_O,
+	K_KEY_P = kVK_ANSI_P,
+	K_KEY_Q = kVK_ANSI_Q,
+	K_KEY_R = kVK_ANSI_R,
+	K_KEY_S = kVK_ANSI_S,
+	K_KEY_T = kVK_ANSI_T,
+	K_KEY_U = kVK_ANSI_U,
+	K_KEY_V = kVK_ANSI_V,
+	K_KEY_W = kVK_ANSI_W,
+	K_KEY_X = kVK_ANSI_X,
+	K_KEY_Y = kVK_ANSI_Y,
+	K_KEY_Z = kVK_ANSI_Z,
+	K_SEMICOLON = kVK_ANSI_Semicolon,
+	K_EQUAL = kVK_ANSI_Equal,
+	K_COMMA = kVK_ANSI_Comma,
+	K_MINUS = kVK_ANSI_Minus,
+	K_PERIOD = kVK_ANSI_Period,
+	K_SLASH = kVK_ANSI_Slash,
+	K_BACKQUOTE = kVK_ANSI_Grave,
+	K_BRACKET_LEFT = kVK_ANSI_LeftBracket,
+	K_BACKSLASH = kVK_ANSI_Backslash,
+	K_BRACKET_RIGHT = kVK_ANSI_RightBracket,
+	K_QUOTE = kVK_ANSI_Quote,
+
 	K_BACKSPACE = kVK_Delete,
 	K_DELETE = kVK_ForwardDelete,
 	K_RETURN = kVK_Return,
@@ -114,6 +163,55 @@ typedef CGKeyCode MMKeyCode;
 
 enum _MMKeyCode {
 	K_NOT_A_KEY = 9999,
+
+	K_DIGIT_0 = XK_0,
+	K_DIGIT_1 = XK_1,
+	K_DIGIT_2 = XK_2,
+	K_DIGIT_3 = XK_3,
+	K_DIGIT_4 = XK_4,
+	K_DIGIT_5 = XK_5,
+	K_DIGIT_6 = XK_6,
+	K_DIGIT_7 = XK_7,
+	K_DIGIT_8 = XK_8,
+	K_DIGIT_9 = XK_9,
+	K_KEY_A = XK_A,
+	K_KEY_B = XK_B,
+	K_KEY_C = XK_C,
+	K_KEY_D = XK_D,
+	K_KEY_E = XK_E,
+	K_KEY_F = XK_F,
+	K_KEY_G = XK_G,
+	K_KEY_H = XK_H,
+	K_KEY_I = XK_I,
+	K_KEY_J = XK_J,
+	K_KEY_K = XK_K,
+	K_KEY_L = XK_L,
+	K_KEY_M = XK_M,
+	K_KEY_N = XK_N,
+	K_KEY_O = XK_O,
+	K_KEY_P = XK_P,
+	K_KEY_Q = XK_Q,
+	K_KEY_R = XK_R,
+	K_KEY_S = XK_S,
+	K_KEY_T = XK_T,
+	K_KEY_U = XK_U,
+	K_KEY_V = XK_V,
+	K_KEY_W = XK_W,
+	K_KEY_X = XK_X,
+	K_KEY_Y = XK_Y,
+	K_KEY_Z = XK_Z,
+	K_SEMICOLON = XK_semicolon,
+	K_EQUAL = XK_plus,
+	K_COMMA = XK_comma,
+	K_MINUS = XK_minus,
+	K_PERIOD = XK_period,
+	K_SLASH = XK_slash,
+	K_BACKQUOTE = XK_grave,
+	K_BRACKET_LEFT = XK_bracketleft,
+	K_BACKSLASH = XK_backslash,
+	K_BRACKET_RIGHT = XK_bracketright,
+	K_QUOTE = XK_apostrophe,
+
 	K_BACKSPACE = XK_BackSpace,
 	K_DELETE = XK_Delete,
 	K_RETURN = XK_Return,
@@ -166,21 +264,21 @@ enum _MMKeyCode {
 	K_MENU = K_NOT_A_KEY,
 
 	K_NUMPAD_LOCK = K_NOT_A_KEY,
-	K_NUMPAD_0 = K_NOT_A_KEY,
-	K_NUMPAD_1 = K_NOT_A_KEY,
-	K_NUMPAD_2 = K_NOT_A_KEY,
-	K_NUMPAD_3 = K_NOT_A_KEY,
-	K_NUMPAD_4 = K_NOT_A_KEY,
-	K_NUMPAD_5 = K_NOT_A_KEY,
-	K_NUMPAD_6 = K_NOT_A_KEY,
-	K_NUMPAD_7 = K_NOT_A_KEY,
-	K_NUMPAD_8 = K_NOT_A_KEY,
-	K_NUMPAD_9 = K_NOT_A_KEY,
-	K_NUMPAD_PLUS = K_NOT_A_KEY,
-	K_NUMPAD_MINUS = K_NOT_A_KEY,
-	K_NUMPAD_MULTIPLY = K_NOT_A_KEY,
-	K_NUMPAD_DIVIDE = K_NOT_A_KEY,
-	K_NUMPAD_DECIMAL = K_NOT_A_KEY,
+	K_NUMPAD_0 = XK_KP_0,
+	K_NUMPAD_1 = XK_KP_1,
+	K_NUMPAD_2 = XK_KP_2,
+	K_NUMPAD_3 = XK_KP_3,
+	K_NUMPAD_4 = XK_KP_4,
+	K_NUMPAD_5 = XK_KP_5,
+	K_NUMPAD_6 = XK_KP_6,
+	K_NUMPAD_7 = XK_KP_7,
+	K_NUMPAD_8 = XK_KP_8,
+	K_NUMPAD_9 = XK_KP_9,
+	K_NUMPAD_PLUS = XK_KP_Add,
+	K_NUMPAD_MINUS = XK_KP_Subtract,
+	K_NUMPAD_MULTIPLY = XK_KP_Multiply,
+	K_NUMPAD_DIVIDE = XK_KP_Divide,
+	K_NUMPAD_DECIMAL = XK_KP_Separator,
 
 	K_AUDIO_VOLUME_MUTE = XF86XK_AudioMute,
 	K_AUDIO_VOLUME_DOWN = XF86XK_AudioLowerVolume,
@@ -208,6 +306,55 @@ typedef KeySym MMKeyCode;
 
 enum _MMKeyCode {
 	K_NOT_A_KEY = 9999,
+
+	K_DIGIT_0 = 0x30,
+	K_DIGIT_1 = 0x31,
+	K_DIGIT_2 = 0x32,
+	K_DIGIT_3 = 0x33,
+	K_DIGIT_4 = 0x34,
+	K_DIGIT_5 = 0x35,
+	K_DIGIT_6 = 0x36,
+	K_DIGIT_7 = 0x37,
+	K_DIGIT_8 = 0x38,
+	K_DIGIT_9 = 0x39,
+	K_KEY_A = 0x41,
+	K_KEY_B = 0x42,
+	K_KEY_C = 0x43,
+	K_KEY_D = 0x44,
+	K_KEY_E = 0x45,
+	K_KEY_F = 0x46,
+	K_KEY_G = 0x47,
+	K_KEY_H = 0x48,
+	K_KEY_I = 0x49,
+	K_KEY_J = 0x4A,
+	K_KEY_K = 0x4B,
+	K_KEY_L = 0x4C,
+	K_KEY_M = 0x4D,
+	K_KEY_N = 0x4E,
+	K_KEY_O = 0x4F,
+	K_KEY_P = 0x50,
+	K_KEY_Q = 0x51,
+	K_KEY_R = 0x52,
+	K_KEY_S = 0x53,
+	K_KEY_T = 0x54,
+	K_KEY_U = 0x55,
+	K_KEY_V = 0x56,
+	K_KEY_W = 0x57,
+	K_KEY_X = 0x58,
+	K_KEY_Y = 0x59,
+	K_KEY_Z = 0x5A,
+	K_SEMICOLON = VK_OEM_1,
+	K_EQUAL = VK_OEM_PLUS,
+	K_COMMA = VK_OEM_COMMA,
+	K_MINUS = VK_OEM_MINUS,
+	K_PERIOD = VK_OEM_PERIOD,
+	K_SLASH = VK_OEM_2,
+	K_BACKQUOTE = VK_OEM_3,
+	K_BRACKET_LEFT = VK_OEM_4,
+	K_BACKSLASH = VK_OEM_5,
+	K_BRACKET_RIGHT = VK_OEM_6,
+	K_QUOTE = VK_OEM_7,
+
 	K_BACKSPACE = VK_BACK,
 	K_DELETE = VK_DELETE,
 	K_RETURN = VK_RETURN,
diff --git a/node_modules/robotjs/src/keypress.c b/node_modules/robotjs/src/keypress.c
index 2bbdccd..ec19c80 100644
--- a/node_modules/robotjs/src/keypress.c
+++ b/node_modules/robotjs/src/keypress.c
@@ -16,7 +16,7 @@
 /* Convenience wrappers around ugly APIs. */
 #if defined(IS_WINDOWS)
 	#define WIN32_KEY_EVENT_WAIT(key, flags) \
-		(win32KeyEvent(key, flags), Sleep(DEADBEEF_RANDRANGE(63, 125)))
+		(win32KeyEvent(key, flags))
 #elif defined(USE_X11)
 	#define X_KEY_EVENT(display, key, is_press) \
 		(XTestFakeKeyEvent(display, \
@@ -24,8 +24,7 @@
 		                   is_press, CurrentTime), \
 		 XSync(display, false))
 	#define X_KEY_EVENT_WAIT(display, key, is_press) \
-		(X_KEY_EVENT(display, key, is_press), \
-		 microsleep(DEADBEEF_UNIFORM(62.5, 125.0)))
+		(X_KEY_EVENT(display, key, is_press))
 #endif
 
 #if defined(IS_MACOSX)
diff --git a/node_modules/robotjs/src/robotjs.cc b/node_modules/robotjs/src/robotjs.cc
index 8aadd5d..0d7aec9 100644
--- a/node_modules/robotjs/src/robotjs.cc
+++ b/node_modules/robotjs/src/robotjs.cc
@@ -288,55 +288,124 @@ struct KeyNames
 
 static KeyNames key_names[] =
 {
-	{ "backspace",      K_BACKSPACE },
-	{ "delete",         K_DELETE },
-	{ "enter",          K_RETURN },
-	{ "tab",            K_TAB },
-	{ "escape",         K_ESCAPE },
-	{ "up",             K_UP },
-	{ "down",           K_DOWN },
-	{ "right",          K_RIGHT },
-	{ "left",           K_LEFT },
-	{ "home",           K_HOME },
-	{ "end",            K_END },
-	{ "pageup",         K_PAGEUP },
-	{ "pagedown",       K_PAGEDOWN },
-	{ "f1",             K_F1 },
-	{ "f2",             K_F2 },
-	{ "f3",             K_F3 },
-	{ "f4",             K_F4 },
-	{ "f5",             K_F5 },
-	{ "f6",             K_F6 },
-	{ "f7",             K_F7 },
-	{ "f8",             K_F8 },
-	{ "f9",             K_F9 },
-	{ "f10",            K_F10 },
-	{ "f11",            K_F11 },
-	{ "f12",            K_F12 },
-	{ "f13",            K_F13 },
-	{ "f14",            K_F14 },
-	{ "f15",            K_F15 },
-	{ "f16",            K_F16 },
-	{ "f17",            K_F17 },
-	{ "f18",            K_F18 },
-	{ "f19",            K_F19 },
-	{ "f20",            K_F20 },
-	{ "f21",            K_F21 },
-	{ "f22",            K_F22 },
-	{ "f23",            K_F23 },
-	{ "f24",            K_F24 },
-	{ "capslock",       K_CAPSLOCK },
+	// https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
+	// http://keycode.info/
+	// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#Printable_keys_in_standard_position
+
+	// Cancel,
+	{ "Backspace",      K_BACKSPACE },
+	{ "Tab",            K_TAB },
+	{ "Enter",          K_RETURN },
+	// Pause,
+	{ "CapsLock",       K_CAPSLOCK },
+	{ "Escape",         K_ESCAPE },
+	{ "Space",          K_SPACE },
+	{ "PageUp",         K_PAGEUP },
+	{ "PageDown",       K_PAGEDOWN },
+	{ "End",            K_END },
+	{ "Home",           K_HOME },
+	{ "ArrowLeft",      K_LEFT },
+	{ "ArrowUp",        K_UP },
+	{ "ArrowRight",     K_RIGHT },
+	{ "ArrowDown",      K_DOWN },
+	{ "Insert",         K_INSERT },
+	{ "Delete",         K_DELETE },
+	{ "0",			K_DIGIT_0 },
+	{ "1",			K_DIGIT_1 },
+	{ "2",			K_DIGIT_2 },
+	{ "3",			K_DIGIT_3 },
+	{ "4",			K_DIGIT_4 },
+	{ "5",			K_DIGIT_5 },
+	{ "6",			K_DIGIT_6 },
+	{ "7",			K_DIGIT_7 },
+	{ "8",			K_DIGIT_8 },
+	{ "9",			K_DIGIT_9 },
+	{ "A",			K_KEY_A },
+	{ "B",			K_KEY_B },
+	{ "C",			K_KEY_C },
+	{ "D",			K_KEY_D },
+	{ "E",			K_KEY_E },
+	{ "F",			K_KEY_F },
+	{ "G",			K_KEY_G },
+	{ "H",			K_KEY_H },
+	{ "I",			K_KEY_I },
+	{ "J",			K_KEY_J },
+	{ "K",			K_KEY_K },
+	{ "L",			K_KEY_L },
+	{ "M",			K_KEY_M },
+	{ "N",			K_KEY_N },
+	{ "O",			K_KEY_O },
+	{ "P",			K_KEY_P },
+	{ "Q",			K_KEY_Q },
+	{ "R",			K_KEY_R },
+	{ "S",			K_KEY_S },
+	{ "T",			K_KEY_T },
+	{ "U",			K_KEY_U },
+	{ "V",			K_KEY_V },
+	{ "W",			K_KEY_W },
+	{ "X",			K_KEY_X },
+	{ "Y",			K_KEY_Y },
+	{ "Z",			K_KEY_Z },
+	{ "Numpad0",						K_NUMPAD_0 },
+	{ "Numpad1",						K_NUMPAD_1 },
+	{ "Numpad2",						K_NUMPAD_2 },
+	{ "Numpad3",						K_NUMPAD_3 },
+	{ "Numpad4",						K_NUMPAD_4 },
+	{ "Numpad5",						K_NUMPAD_5 },
+	{ "Numpad6",						K_NUMPAD_6 },
+	{ "Numpad7",						K_NUMPAD_7 },
+	{ "Numpad8",						K_NUMPAD_8 },
+	{ "Numpad9",						K_NUMPAD_9 },
+	{ "NumpadMultiply",			K_NUMPAD_MULTIPLY },
+	{ "NumpadAdd",					K_NUMPAD_PLUS },
+	{ "NumpadSubtract",			K_NUMPAD_MINUS },
+	{ "NumpadDecimal",			K_NUMPAD_DECIMAL },
+	{ "NumpadDivide",				K_NUMPAD_DIVIDE },
+	{ "F1", 		K_F1 },
+	{ "F2", 		K_F2 },
+	{ "F3", 		K_F3 },
+	{ "F4", 		K_F4 },
+	{ "F5", 		K_F5 },
+	{ "F6", 		K_F6 },
+	{ "F7", 		K_F7 },
+	{ "F8", 		K_F8 },
+	{ "F9", 		K_F9 },
+	{ "F10",		K_F10 },
+	{ "F11",		K_F11 },
+	{ "F12",		K_F12 },
+	{ "F13",		K_F13 },
+	{ "F14",		K_F14 },
+	{ "F15",		K_F15 },
+	{ "F16",		K_F16 },
+	{ "F17",		K_F17 },
+	{ "F18",		K_F18 },
+	{ "F19",		K_F19 },
+	{ "F20",		K_F20 },
+	{ "F21",		K_F21 },
+	{ "F22",		K_F22 },
+	{ "F23",		K_F23 },
+	{ "F24",		K_F24 },
+	{ "Semicolon",			K_SEMICOLON },
+	{ "Equal",					K_EQUAL },
+	{ "Comma",					K_COMMA },
+	{ "Minus",					K_MINUS },
+	{ "Period",					K_PERIOD },
+	{ "Slash",					K_SLASH },
+	{ "Backquote",			K_BACKQUOTE },
+	{ "BracketLeft",		K_BRACKET_LEFT },
+	{ "Backslash",			K_BACKSLASH },
+	{ "BracketRight",		K_BRACKET_RIGHT },
+	{ "Quote",					K_QUOTE },
+	{ "Ctrl",           K_CONTROL },
+	{ "Alt",            K_ALT },
+	{ "Shift",          K_SHIFT },
+
 	{ "command",        K_META },
-	{ "alt",            K_ALT },
 	{ "right_alt",      K_RIGHT_ALT },
-	{ "control",        K_CONTROL },
 	{ "left_control",   K_LEFT_CONTROL },
 	{ "right_control",  K_RIGHT_CONTROL },
-	{ "shift",          K_SHIFT },
 	{ "right_shift",    K_RIGHTSHIFT },
-	{ "space",          K_SPACE },
 	{ "printscreen",    K_PRINTSCREEN },
-	{ "insert",         K_INSERT },
 	{ "menu",           K_MENU },
 
 	{ "audio_mute",     K_AUDIO_VOLUME_MUTE },
@@ -353,22 +422,6 @@ static KeyNames key_names[] =
 	{ "audio_random",   K_AUDIO_RANDOM },
 
 	{ "numpad_lock",	K_NUMPAD_LOCK },
-	{ "numpad_0",		K_NUMPAD_0 },
-	{ "numpad_0",		K_NUMPAD_0 },
-	{ "numpad_1",		K_NUMPAD_1 },
-	{ "numpad_2",		K_NUMPAD_2 },
-	{ "numpad_3",		K_NUMPAD_3 },
-	{ "numpad_4",		K_NUMPAD_4 },
-	{ "numpad_5",		K_NUMPAD_5 },
-	{ "numpad_6",		K_NUMPAD_6 },
-	{ "numpad_7",		K_NUMPAD_7 },
-	{ "numpad_8",		K_NUMPAD_8 },
-	{ "numpad_9",		K_NUMPAD_9 },
-	{ "numpad_+",		K_NUMPAD_PLUS },
-	{ "numpad_-",		K_NUMPAD_MINUS },
-	{ "numpad_*",		K_NUMPAD_MULTIPLY },
-	{ "numpad_/",		K_NUMPAD_DIVIDE },
-	{ "numpad_.",		K_NUMPAD_DECIMAL },
 
 	{ "lights_mon_up",    K_LIGHTS_MON_UP },
 	{ "lights_mon_down",  K_LIGHTS_MON_DOWN },
@@ -383,11 +436,11 @@ int CheckKeyCodes(char* k, MMKeyCode *key)
 {
 	if (!key) return -1;
 
-	if (strlen(k) == 1)
-	{
-		*key = keyCodeForChar(*k);
-		return 0;
-	}
+	// if (strlen(k) == 1)
+	// {
+	//     *key = keyCodeForChar(*k);
+	//     return 0;
+	// }
 
 	*key = K_NOT_A_KEY;
 
@@ -414,7 +467,7 @@ int CheckKeyFlags(char* f, MMKeyFlags* flags)
 {
 	if (!flags) return -1;
 
-	if (strcmp(f, "alt") == 0 || strcmp(f, "right_alt") == 0)
+	if (strcmp(f, "Alt") == 0 || strcmp(f, "right_alt") == 0)
 	{
 		*flags = MOD_ALT;
 	}
@@ -422,11 +475,11 @@ int CheckKeyFlags(char* f, MMKeyFlags* flags)
 	{
 		*flags = MOD_META;
 	}
-	else if(strcmp(f, "control") == 0 || strcmp(f, "right_control") == 0 || strcmp(f, "left_control") == 0)
+	else if(strcmp(f, "Ctrl") == 0 || strcmp(f, "right_control") == 0 || strcmp(f, "left_control") == 0)
 	{
 		*flags = MOD_CONTROL;
 	}
-	else if(strcmp(f, "shift") == 0 || strcmp(f, "right_shift") == 0)
+	else if(strcmp(f, "Shift") == 0 || strcmp(f, "right_shift") == 0)
 	{
 		*flags = MOD_SHIFT;
 	}
